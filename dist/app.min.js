angular.module('tasks',['ui.router','kinvey']);
angular.module('tasks')
.controller('tasksController',['$scope','$state','$kinvey','tasks','activeUser',function($scope,$state,$kinvey,tasks,activeUser){
	$scope.tasks = tasks;
	$scope.hasActiveUser = (activeUser!==null) ? true : false;
	$scope.isAdmin = activeUser.admin ? true : false;
	$scope.approve = function(bool,index,approvalId){
		// console.log(bool + ' ' + taskId );
		// console.log(tasks[$index].approval._id);
		console.log(index);
		var doc = {
			_id: approvalId,
			approved: bool
		}
		$kinvey.DataStore.save('task-approval',doc)
		.then(function(res){
			$scope.tasks[index].approval = res;
		},function(err){
			console.log('Couldnot approve the task!... see the error log below...');
			console.log(err);
		});
	}
}])
.controller('addTaskController',['$scope','$state','$kinvey',function($scope,$state,$kinvey){
	$scope.addTask = function(){
		if ($scope.addTaskForm.taskName.$error.required || $scope.addTaskForm.startDate.$error.required || $scope.addTaskForm.endDate.$error.required ) return null;
		var doc = {
			task_name: $scope.task.name,
			start_date: $scope.task.startDate,
			end_date: $scope.task.endDate,
			comments: $scope.task.comments,
		};
		$kinvey.DataStore.save('tasks',doc).then(function(){
			$state.go('root.tasks',{},{reload:true});
		},
		function(err) {
			console.log('There seems to be a problem adding the task!...see the error log below...');
			console.log(err);
		});
	}
}]);

angular.module('tasks')
.config(['$stateProvider','$urlRouterProvider',function($stateProvider,$urlRouterProvider){
	$stateProvider
	.state('root.tasks',{
		url: '/tasks',
		resolve: {
			activeUser: ['$kinvey',function($kinvey){
				return $kinvey.getActiveUser();
			}],
			tasks: ['$kinvey',function($kinvey){
				// var query = new $kinvey.Query();
				// query.equalTo()
				return $kinvey.DataStore.find('tasks',null,{
					relations: {approval: 'task-approval'}
				})
				.then(function(model){
					console.log('Fetched records');
					console.log(model);
					return model;
				},function(err){
					console.log('Some error fetching the records!...see log below...');
					console.log(err);
				})
			}]	
		},
		views: {
			'section@root': {
				templateUrl: '/partials/tasks.html',
				controller: 'tasksController'
			}
		}
	})
	.state('root.tasks.addtask',{
		url: '/addtask',
		views: {
			'section@root': {
				templateUrl: '/partials/add-task.html',
				controller: 'addTaskController'
			}
		}
	});
}]);

// Defining the app
'use strict';

angular.module('main',['ui.router','kinvey','tasks','login']);

angular.module('main')
.config(['$stateProvider','$urlRouterProvider',function($stateProvider,$urlRouterProvider){
	$urlRouterProvider.otherwise('/');
	$stateProvider.state('root',{
		views: {
			'body': {
				templateUrl: 'partials/body.html'
			},
			'header@root': {
				templateUrl: 'partials/main-nav.html'
			} 
		}
	});
}])

angular.module('login',['ui.router','kinvey']);
angular.module('login')
.run(['$kinvey','$state',function($kinvey,$state){
	console.log('login run');
	// TODO: handle kinvey failing to initialize better!
	$kinvey.init({
			appKey: 'kid_Wk8MsXwikg',
			appSecret: '68c9a63e8a4a41b98898796652bfccc5'
	}).then(function(){
		console.log('Kinvey initalized...checking for active user');
		return determineBehaviour($kinvey,$state);
	},function(err){
		console.log('Kinvey could not be initalized (see error log below)...determining behaviour');
		console.log(err);
		return determineBehaviour($kinvey,$state);
	})

	function determineBehaviour($kinvey,$state){
		var activeUser = $kinvey.getActiveUser();
		console.log('Determining behaviour...')
		if(activeUser!==null){
			console.log('Active user confirmed...redirecting to root state...');
			$state.go('root.tasks');
		} else {
			console.log('No active user...redirecting to login page...');
			$state.go('root.login');
		}		
	}
}]);

angular.module('login')
.controller('loginController',['$scope','$state','$kinvey','activeUser',function($scope,$state,$kinvey,activeUser){
	if(activeUser!==null){
		$scope.hasActiveUser = true;
		$scope.username =  activeUser.username;
		$scope.isAdmin = activeUser.admin ? true : false;
	} else $scope.hasActiveUser = false;

	$scope.login = function(){
		if ($scope.loginForm.username.$error.required || $scope.loginForm.password.$error.required) return null;

		$kinvey.User.login({
			username: $scope.user.name,
			password: $scope.user.pwd
		}).then(function(res){
			console.log('Successfully logged in!');
			console.log(res);
			$state.reload();
		},function(err){
			console.log('Error logging in!');
			console.log(err);
			$state.reload();
		})
	}

	$scope.logout = function(){
		$kinvey.User.logout().then(function(){
			console.log('Successfully logged out!');
			$state.reload();
		},function(err){
			console.log('Some problem logging out...try again!');
			console.log(err);
			$state.reload();
		})
	}
}]);
angular.module('login')
.config(['$stateProvider',function($stateProvider){
	$stateProvider
	.state('root.login',{
		url: '/login',
		resolve: {
			activeUser: ['$kinvey',function($kinvey){
				return $kinvey.getActiveUser();
			}]
		},
		views: {
			'header@root': {
				templateUrl: '/partials/login-header.html'
			},
			'section@root': {
				templateUrl: '/partials/login.html',
				controller: 'loginController'
			}
		}
	})
}]);

"use strict";

var environment = (function defineEnvironment(env){
	// /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i
	console.log(navigator);
	var agent = /Android/i.test(navigator.userAgent)?'webview':'browser';
	if(env === 'dev'){
		return {
			env: env,
			agent: agent,
			readyEvent: agent === 'webview'? 'deviceready':'DOMContentLoaded',
		}
	}

})('dev');

console.log('environment ' + JSON.stringify(environment));

var app = new function() {
	//	TODO: Event Logger

	//	Events Handlers	
	function onDeviceReady() {
		console.log('Bootstrapping angular on main module...');
		angular.bootstrap(document, ['main']);
	};

	//  Bind to the events that the app will respond  
	function bindEvents() {
		console.log('Ready event binding');
		document.addEventListener (environment.readyEvent, onDeviceReady, false);
		// Andorid and iOS supported events
		// However note iOS quirks in them
		/*
		document.addEventListener('pause', onPause, false);
		document.addEventListener('resume', onResume, false);
		*/
		// The following are Android specific events
		// Implement backButton event handler to override default behaviour
		/* 
		document.addEventListener('backbutton', onBackButton, false);
		document.addEventListener('menubutton', onMenuButton, false);
		document.addEventListener('searchbutton', onSearchButton, false);
		*/
	};

	// Application Constructor
	return {
		initialize: function() {
			console.log('Initializing app by binding handlers to different events that the app responds to...');
			bindEvents();
		}
	}
};
app.initialize();
